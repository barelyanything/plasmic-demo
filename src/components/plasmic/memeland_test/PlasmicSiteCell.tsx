// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5VnySwGRBKmpnaR3N63wcy
// Component: VBtFIihioZ
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_memeland_test.module.css"; // plasmic-import: 5VnySwGRBKmpnaR3N63wcy/projectcss
import sty from "./PlasmicSiteCell.module.css"; // plasmic-import: VBtFIihioZ/css

export type PlasmicSiteCell__VariantMembers = {};
export type PlasmicSiteCell__VariantsArgs = {};
type VariantPropType = keyof PlasmicSiteCell__VariantsArgs;
export const PlasmicSiteCell__VariantProps = new Array<VariantPropType>();

export type PlasmicSiteCell__ArgsType = {};
type ArgPropType = keyof PlasmicSiteCell__ArgsType;
export const PlasmicSiteCell__ArgProps = new Array<ArgPropType>();

export type PlasmicSiteCell__OverridesType = {
  root?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  h3?: p.Flex<"h3">;
};

export interface DefaultSiteCellProps {
  className?: string;
}

function PlasmicSiteCell__RenderFunc(props: {
  variants: PlasmicSiteCell__VariantsArgs;
  args: PlasmicSiteCell__ArgsType;
  overrides: PlasmicSiteCell__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.PlasmicImg
        data-plasmic-name={"img"}
        data-plasmic-override={overrides.img}
        alt={""}
        className={classNames(sty.img)}
        displayHeight={"100px" as const}
        displayMaxHeight={"none" as const}
        displayMaxWidth={"none" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"100px" as const}
        loading={"lazy" as const}
        src={(() => {
          try {
            return $ctx.plasmicCmsSiteListItem.data.thumbnail.url;
          } catch (e) {
            if (e instanceof TypeError) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__czAc)}>
          <h3
            data-plasmic-name={"h3"}
            data-plasmic-override={overrides.h3}
            className={classNames(
              projectcss.all,
              projectcss.h3,
              projectcss.__wab_text,
              sty.h3
            )}
          >
            {(() => {
              try {
                return $ctx.plasmicCmsSiteListItem.data.title;
              } catch (e) {
                if (e instanceof TypeError) {
                  return "You won't believe what happens next.";
                }
                throw e;
              }
            })()}
          </h3>

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___2SRwK
            )}
          >
            {(() => {
              try {
                return $ctx.plasmicCmsSiteListItem.data.description;
              } catch (e) {
                if (e instanceof TypeError) {
                  return "Enter some text";
                }
                throw e;
              }
            })()}
          </div>
        </div>
      ) : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "img", "h3"],
  img: ["img"],
  h3: ["h3"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  img: typeof p.PlasmicImg;
  h3: "h3";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSiteCell__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSiteCell__VariantsArgs;
    args?: PlasmicSiteCell__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSiteCell__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSiteCell__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSiteCell__ArgProps,
          internalVariantPropNames: PlasmicSiteCell__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSiteCell__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSiteCell";
  } else {
    func.displayName = `PlasmicSiteCell.${nodeName}`;
  }
  return func;
}

export const PlasmicSiteCell = Object.assign(
  // Top-level PlasmicSiteCell renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h3: makeNodeComponent("h3"),

    // Metadata about props expected for PlasmicSiteCell
    internalVariantProps: PlasmicSiteCell__VariantProps,
    internalArgProps: PlasmicSiteCell__ArgProps
  }
);

export default PlasmicSiteCell;
/* prettier-ignore-end */
