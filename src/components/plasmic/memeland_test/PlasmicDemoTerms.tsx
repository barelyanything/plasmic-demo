// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5VnySwGRBKmpnaR3N63wcy
// Component: G3xAKxPUNE
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import NavigationBar from "../../NavigationBar"; // plasmic-import: CDeTIfElNW/component
import Demoblocktext from "../../Demoblocktext"; // plasmic-import: qDmInQgC8z/component
import Footer from "../../Footer"; // plasmic-import: i4UkpZ_8Of/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_memeland_test.module.css"; // plasmic-import: 5VnySwGRBKmpnaR3N63wcy/projectcss
import sty from "./PlasmicDemoTerms.module.css"; // plasmic-import: G3xAKxPUNE/css

export type PlasmicDemoTerms__VariantMembers = {};
export type PlasmicDemoTerms__VariantsArgs = {};
type VariantPropType = keyof PlasmicDemoTerms__VariantsArgs;
export const PlasmicDemoTerms__VariantProps = new Array<VariantPropType>();

export type PlasmicDemoTerms__ArgsType = {};
type ArgPropType = keyof PlasmicDemoTerms__ArgsType;
export const PlasmicDemoTerms__ArgProps = new Array<ArgPropType>();

export type PlasmicDemoTerms__OverridesType = {
  root?: p.Flex<"div">;
  navigationBar?: p.Flex<typeof NavigationBar>;
  footer?: p.Flex<typeof Footer>;
};

export interface DefaultDemoTermsProps {
  className?: string;
}

function PlasmicDemoTerms__RenderFunc(props: {
  variants: PlasmicDemoTerms__VariantsArgs;
  args: PlasmicDemoTerms__ArgsType;
  overrides: PlasmicDemoTerms__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <React.Fragment>
      {}

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <NavigationBar
            data-plasmic-name={"navigationBar"}
            data-plasmic-override={overrides.navigationBar}
            className={classNames("__wab_instance", sty.navigationBar)}
          />

          <Demoblocktext
            className={classNames("__wab_instance", sty.demoblocktext___5UpVm)}
            slot={
              "1. These terms and conditions (“Terms and Conditions”) shall apply to Grow to Win Game organised by Memeland.\n\n2. By registering or taking part in this Grow to Win Game, you agree to be bound by these Terms and Conditions and the decisions of Memeland in relation to and in connection with this Game."
            }
          >
            {"Terms and Conditions"}
          </Demoblocktext>

          <Demoblocktext
            className={classNames("__wab_instance", sty.demoblocktext__qYpzy)}
            slot={
              "3. Memeland has the absolute discretion to determine the eligibility of Participants. Such determination shall be final and conclusive, and Memeland is not obliged to give any reason for its determination."
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__nBwJq
              )}
            >
              {"Eligibility"}
            </div>
          </Demoblocktext>

          <Demoblocktext
            className={classNames("__wab_instance", sty.demoblocktext__jsuWa)}
            slot={
              "4. Memeland reserves the right to, at any time and in its sole and absolute discretion, replace, remove and/or substitute any of the discounted items.\n\n5. Winners of the Grow to Win Game are defined by providing the right answer to the question within the Grow to Win Game, and the outcome will be decided by the discretion of Memeland.\n\n6. All Winners shall be notified through the grow.memeland.com/#results website within 24 hours of the completion of the game.\n\n7. Memeland will agree with the Winner on a date to purchase the discounted item. The wallet used to participate in the game must be used to purchase the discount item. \n\n8. Discounts are only available within thirty (30) calendar days from games completion or they will be forfeited. No correspondence or claims will be entertained in the event of such forfeiture.\n\n9. If Memeland discovers that a Winner was not entitled to participate or if a Winner is subsequently disqualified from participating in the Grow to Win Game, Memeland may at its discretion forfeit the discount.\n\n10. If the discounted item‘s token ID is “91174246442596798679755974477721363784852464839751184724844702497265365811210” the redemption of the physical item will be subjected to the terms and conditions below\n\ni) The NFT of the token ID above must be transferred to the Ethereum wallet address “memelandprize.eth” by November 12th 2022 in order to redeem one (1) iPhone 14 Pro 128 GB. Any failure to do so will forfeit the NFT’s eligibility to redeem the physical item. No correspondence or claims will be entertained in the event of such forfeiture. A Participant whose redemption eligibility has been forfeited shall not be entitled to any payment or compensation whatsoever from Memeland.\n\nii) Redemption arrangement of the iPhone 14 Pro 128 GB will be made within 60 days after transfer of NFT with the token ID above to the Ethereum wallet address “memelandprize.eth” to the owner of the wallet address in which the NFT was transferred from. \n\niii) Memeland reserves the right to, at any time and in its sole and absolute discretion, replace, remove and/or substitute the iPhone 14 Pro 128 GB.\n\n"
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__btMn
              )}
            >
              {"Terms of Winning and Redemption"}
            </div>
          </Demoblocktext>

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navigationBar", "footer"],
  navigationBar: ["navigationBar"],
  footer: ["footer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navigationBar: typeof NavigationBar;
  footer: typeof Footer;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDemoTerms__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDemoTerms__VariantsArgs;
    args?: PlasmicDemoTerms__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicDemoTerms__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicDemoTerms__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicDemoTerms__ArgProps,
          internalVariantPropNames: PlasmicDemoTerms__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicDemoTerms__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDemoTerms";
  } else {
    func.displayName = `PlasmicDemoTerms.${nodeName}`;
  }
  return func;
}

export const PlasmicDemoTerms = Object.assign(
  // Top-level PlasmicDemoTerms renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationBar: makeNodeComponent("navigationBar"),
    footer: makeNodeComponent("footer"),

    // Metadata about props expected for PlasmicDemoTerms
    internalVariantProps: PlasmicDemoTerms__VariantProps,
    internalArgProps: PlasmicDemoTerms__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicDemoTerms;
/* prettier-ignore-end */
