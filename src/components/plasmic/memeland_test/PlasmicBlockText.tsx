// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5VnySwGRBKmpnaR3N63wcy
// Component: QMEANiCVTU
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ContentText from "../../ContentText"; // plasmic-import: ObQPJ3fHQ3/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_memeland_test.module.css"; // plasmic-import: 5VnySwGRBKmpnaR3N63wcy/projectcss
import sty from "./PlasmicBlockText.module.css"; // plasmic-import: QMEANiCVTU/css

export type PlasmicBlockText__VariantMembers = {};
export type PlasmicBlockText__VariantsArgs = {};
type VariantPropType = keyof PlasmicBlockText__VariantsArgs;
export const PlasmicBlockText__VariantProps = new Array<VariantPropType>();

export type PlasmicBlockText__ArgsType = {};
type ArgPropType = keyof PlasmicBlockText__ArgsType;
export const PlasmicBlockText__ArgProps = new Array<ArgPropType>();

export type PlasmicBlockText__OverridesType = {
  root?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
  contentText?: p.Flex<typeof ContentText>;
};

export interface DefaultBlockTextProps {
  className?: string;
}

function PlasmicBlockText__RenderFunc(props: {
  variants: PlasmicBlockText__VariantsArgs;
  args: PlasmicBlockText__ArgsType;
  overrides: PlasmicBlockText__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"wrapper"}
          data-plasmic-override={overrides.wrapper}
          className={classNames(projectcss.all, sty.wrapper)}
        >
          <ContentText
            data-plasmic-name={"contentText"}
            data-plasmic-override={overrides.contentText}
            className={classNames("__wab_instance", sty.contentText)}
            slot={
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___2DqPf
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
                }
              </div>
            }
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ch6R
              )}
            >
              {"What is Memeland"}
            </div>
          </ContentText>
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "wrapper", "contentText"],
  wrapper: ["wrapper", "contentText"],
  contentText: ["contentText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  wrapper: "div";
  contentText: typeof ContentText;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlockText__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlockText__VariantsArgs;
    args?: PlasmicBlockText__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlockText__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlockText__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlockText__ArgProps,
          internalVariantPropNames: PlasmicBlockText__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlockText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockText";
  } else {
    func.displayName = `PlasmicBlockText.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockText = Object.assign(
  // Top-level PlasmicBlockText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    contentText: makeNodeComponent("contentText"),

    // Metadata about props expected for PlasmicBlockText
    internalVariantProps: PlasmicBlockText__VariantProps,
    internalArgProps: PlasmicBlockText__ArgProps
  }
);

export default PlasmicBlockText;
/* prettier-ignore-end */
