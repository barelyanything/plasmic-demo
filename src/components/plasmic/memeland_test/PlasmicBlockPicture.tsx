// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 5VnySwGRBKmpnaR3N63wcy
// Component: 0jL7M7LmiF
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ContentText from "../../ContentText"; // plasmic-import: ObQPJ3fHQ3/component

import { useScreenVariants as useScreenVariantsy4OOpPP3O6Td } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: y4OOpP-P3O6TD/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_memeland_test.module.css"; // plasmic-import: 5VnySwGRBKmpnaR3N63wcy/projectcss
import sty from "./PlasmicBlockPicture.module.css"; // plasmic-import: 0jL7M7LmiF/css

export type PlasmicBlockPicture__VariantMembers = {
  picture: "top" | "bottom" | "left" | "right";
};
export type PlasmicBlockPicture__VariantsArgs = {
  picture?: SingleChoiceArg<"top" | "bottom" | "left" | "right">;
};
type VariantPropType = keyof PlasmicBlockPicture__VariantsArgs;
export const PlasmicBlockPicture__VariantProps = new Array<VariantPropType>(
  "picture"
);

export type PlasmicBlockPicture__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
};
type ArgPropType = keyof PlasmicBlockPicture__ArgsType;
export const PlasmicBlockPicture__ArgProps = new Array<ArgPropType>(
  "children",
  "slot",
  "slot2"
);

export type PlasmicBlockPicture__OverridesType = {
  root?: p.Flex<"div">;
  wrapper?: p.Flex<"div">;
  mediaContainer?: p.Flex<"div">;
  contentText?: p.Flex<typeof ContentText>;
};

export interface DefaultBlockPictureProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  slot2?: React.ReactNode;
  picture?: SingleChoiceArg<"top" | "bottom" | "left" | "right">;
  className?: string;
}

function PlasmicBlockPicture__RenderFunc(props: {
  variants: PlasmicBlockPicture__VariantsArgs;
  args: PlasmicBlockPicture__ArgsType;
  overrides: PlasmicBlockPicture__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs = React.useMemo(
    () => [
      {
        path: "picture",
        type: "private",
        initFunc: ($props, $state, $ctx) => $props.picture
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, $props, $ctx);

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsy4OOpPP3O6Td()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootpicture_bottom]: hasVariant($state, "picture", "bottom"),
          [sty.rootpicture_left]: hasVariant($state, "picture", "left"),
          [sty.rootpicture_right]: hasVariant($state, "picture", "right"),
          [sty.rootpicture_top]: hasVariant($state, "picture", "top")
        }
      )}
    >
      {true ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"wrapper"}
          data-plasmic-override={overrides.wrapper}
          hasGap={true}
          className={classNames(projectcss.all, sty.wrapper, {
            [sty.wrapperpicture_bottom]: hasVariant(
              $state,
              "picture",
              "bottom"
            ),
            [sty.wrapperpicture_left]: hasVariant($state, "picture", "left"),
            [sty.wrapperpicture_right]: hasVariant($state, "picture", "right"),
            [sty.wrapperpicture_top]: hasVariant($state, "picture", "top")
          })}
        >
          {(
            hasVariant($state, "picture", "right")
              ? true
              : hasVariant($state, "picture", "left")
              ? true
              : hasVariant($state, "picture", "bottom")
              ? true
              : hasVariant($state, "picture", "top")
              ? true
              : hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : false
          ) ? (
            <div
              data-plasmic-name={"mediaContainer"}
              data-plasmic-override={overrides.mediaContainer}
              className={classNames(projectcss.all, sty.mediaContainer, {
                [sty.mediaContainerpicture_bottom]: hasVariant(
                  $state,
                  "picture",
                  "bottom"
                ),
                [sty.mediaContainerpicture_left]: hasVariant(
                  $state,
                  "picture",
                  "left"
                ),
                [sty.mediaContainerpicture_right]: hasVariant(
                  $state,
                  "picture",
                  "right"
                ),
                [sty.mediaContainerpicture_top]: hasVariant(
                  $state,
                  "picture",
                  "top"
                )
              })}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__dayFv)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={
                      "https://images.unsplash.com/photo-1561214115-f2f134cc4912?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1418&q=80" as const
                    }
                  />
                ),

                value: args.slot2
              })}
            </div>
          ) : null}

          <ContentText
            data-plasmic-name={"contentText"}
            data-plasmic-override={overrides.contentText}
            className={classNames("__wab_instance", sty.contentText, {
              [sty.contentTextpicture_bottom]: hasVariant(
                $state,
                "picture",
                "bottom"
              ),
              [sty.contentTextpicture_left]: hasVariant(
                $state,
                "picture",
                "left"
              ),
              [sty.contentTextpicture_right]: hasVariant(
                $state,
                "picture",
                "right"
              )
            })}
            slot={p.renderPlasmicSlot({
              defaultContents:
                "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.",
              value: args.slot
            })}
            textAlign={
              hasVariant($state, "picture", "right")
                ? ("left" as const)
                : hasVariant($state, "picture", "left")
                ? ("left" as const)
                : undefined
            }
          >
            {p.renderPlasmicSlot({
              defaultContents: "Title",
              value: args.children,
              className: classNames(sty.slotTargetChildren, {
                [sty.slotTargetChildrenpicture_left]: hasVariant(
                  $state,
                  "picture",
                  "left"
                )
              })
            })}
          </ContentText>
        </p.Stack>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "wrapper", "mediaContainer", "contentText"],
  wrapper: ["wrapper", "mediaContainer", "contentText"],
  mediaContainer: ["mediaContainer"],
  contentText: ["contentText"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  wrapper: "div";
  mediaContainer: "div";
  contentText: typeof ContentText;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicBlockPicture__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicBlockPicture__VariantsArgs;
    args?: PlasmicBlockPicture__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicBlockPicture__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicBlockPicture__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicBlockPicture__ArgProps,
          internalVariantPropNames: PlasmicBlockPicture__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicBlockPicture__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockPicture";
  } else {
    func.displayName = `PlasmicBlockPicture.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockPicture = Object.assign(
  // Top-level PlasmicBlockPicture renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    wrapper: makeNodeComponent("wrapper"),
    mediaContainer: makeNodeComponent("mediaContainer"),
    contentText: makeNodeComponent("contentText"),

    // Metadata about props expected for PlasmicBlockPicture
    internalVariantProps: PlasmicBlockPicture__VariantProps,
    internalArgProps: PlasmicBlockPicture__ArgProps
  }
);

export default PlasmicBlockPicture;
/* prettier-ignore-end */
